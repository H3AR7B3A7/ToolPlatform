//----------------------------------//
//              PLUGINS             //
//----------------------------------//

plugins {
	alias(libs.plugins.depManagement) apply false
	alias(libs.plugins.springboot) apply false
	alias(libs.plugins.spotless) apply false
}

subprojects {
	//----------------------------------//
	//           CONFIGURATION          //
	//----------------------------------//

	group = 'be.dog.d.steven'
	version = '0.0.1-SNAPSHOT'
	
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'com.diffplug.spotless'

	java { sourceCompatibility = JavaVersion.VERSION_17 }

	configurations { compileOnly { extendsFrom annotationProcessor } }

	repositories { mavenCentral() }

	bootJar {
		enabled = false
	}

	jar {
		enabled = true
	}

	//----------------------------------//
	//           DEPENDENCIES           //
	//----------------------------------//

	dependencies {
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'com.h2database:h2'
	}


	//----------------------------------//
	//             SPOTLESS             //
	//----------------------------------//
	
	spotless {
		java {
			importOrder()
			removeUnusedImports()
			palantirJavaFormat()
//			prettier(['prettier-plugin-java': '1.5.0']).config(['parser': 'java', 'tabWidth' : 4])
		}
		groovyGradle { greclipse("4.6.3") }
		sql {
			target 'src/main/resources/db/migration/**/*.sql'
			dbeaver()
		}
		format 'html', {
			target 'src/main/resources/static/**/*.html', 'src/resources/templates/**/*.html'
			prettier()
		}
		format 'styling', {
			target 'src/main/resources/static/css/**/*.css'
			prettier()
		}
	}

	//----------------------------------//
	//               TASKS              //
	//----------------------------------//

	tasks.named('test') { useJUnitPlatform() }

	/**
 	* Task to only run Unit tests
 	*/

	def unitTest = sourceSets.create('unitTest')

	configurations[unitTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
	configurations[unitTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

	tasks.register('unitTest', Test) {
		description = 'Runs unit tests.'
		group = 'verification'
		useJUnitPlatform()

		exclude '**/**IT.class'
	}

	/**
	 * Task to only run Integration tests
	 */

	def integrationTest = sourceSets.create('integrationTest')

	configurations[integrationTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
	configurations[integrationTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

	tasks.register('integrationTest', Test) {
		description = 'Runs unit tests.'
		group = 'verification'
		useJUnitPlatform()

		include '**/**IT.class'
	}

	/**
	 * Convenience flag for skipping Integration tests= -PskipIT
	 */

	test {
		if (project.hasProperty('skipIT')) {
			exclude '**/**IT.class'
		}
	}
}